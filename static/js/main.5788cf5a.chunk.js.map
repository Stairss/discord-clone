{"version":3,"sources":["ChatHeader.js","Message.js","features/appSlice.js","features/userSlice.js","firebase.js","Chat.js","SidebarChannel.js","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","type","placeholder","Message","timestamp","user","message","Avatar","src","photo","displayName","Date","toDate","toUTCString","appSlice","createSlice","name","initialState","channelId","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","userSlice","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","fontSize","value","onChange","e","target","disabled","onClick","preventDefault","add","FieldValue","serverTimestamp","SidebarChannel","id","dispatch","useDispatch","Sidebar","channels","setChannels","channel","prompt","signOut","uid","substring","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","store","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5788cf5a.chunk.js","sourcesContent":["import './ChatHeader.css'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\n\r\nconst ChatHeader = ({ channelName }) => {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3>\r\n                    <span className=\"chatHeader__hash\">   #</span>\r\n                    {channelName}\r\n                </h3>\r\n            </div>\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRoundedIcon />\r\n                <PeopleAltRoundedIcon />\r\n                <div className=\"chatHeader__search\">\r\n                    <input type=\"text\" placeholder='Search' />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatHeader;","import { Avatar } from '@material-ui/core';\r\nimport './Message.css';\r\nconst Message = ({ timestamp, user, message }) => {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message__info\">\r\n                <h4>{user.displayName}\r\n                    <span className=\"message__timestamp\">{new Date(timestamp?.toDate()).toUTCString()}</span>\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const appSlice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        channelId: null,\r\n        channelName: null,\r\n    },\r\n    reducers: {\r\n        setChannelInfo: (state, action) => {\r\n            state.channelId = action.payload.channelId;\r\n            state.channelName = action.payload.channelName;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState: {\r\n        user: null,\r\n    },\r\n    reducers: {\r\n        login: (state, action) => {\r\n            state.user = action.payload;\r\n        },\r\n        logout: (state) => {\r\n            state.user = null;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyC4Ag_qCxtA43BaJTiGS1FX8yRWuB0qfAE\",\r\n    authDomain: \"discord-clone-b219e.firebaseapp.com\",\r\n    projectId: \"discord-clone-b219e\",\r\n    storageBucket: \"discord-clone-b219e.appspot.com\",\r\n    messagingSenderId: \"152080203711\",\r\n    appId: \"1:152080203711:web:eeb1b2ab68b2d75b662b0a\",\r\n    measurementId: \"G-37C8SXRPFB\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import './Chat.css'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport ChatHeader from './ChatHeader'\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport Message from './Message';\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport { useEffect, useState } from 'react';\r\nimport db from './firebase';\r\nimport firebase from 'firebase'\r\nconst Chat = () => {\r\n    const user = useSelector(selectUser);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection('channels').doc(channelId).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => (\r\n                setMessages(snapshot.docs.map(doc => doc.data()))\r\n            ))\r\n        }\r\n\r\n    }, [channelId])\r\n\r\n    const sendMessage = e => {\r\n        e.preventDefault();\r\n\r\n        db.collection('channels').doc(channelId).collection('messages').add({\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            message: input,\r\n            user: user,\r\n        })\r\n        setInput('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={channelName} />\r\n            <div className=\"chat__messages\">\r\n                {messages.map(message => (\r\n                    <Message\r\n                        timestamp={message.timestamp}\r\n                        message={message.message}\r\n                        user={message.user}\r\n\r\n                    />\r\n                ))}\r\n            </div>\r\n            <div className=\"chat__input\">\r\n                <AddCircleIcon fontSize=\"large\" />\r\n                <form>\r\n                    <input value={input} onChange={(e) => setInput(e.target.value)} type=\"text\" placeholder={channelId ? `Message ${channelName}` : `Choose channel`}\r\n                        disabled={!channelId}\r\n                    />\r\n                    <button type=\"submit\" className=\"chat__inputButton\"\r\n                        disabled={!channelId} onClick={sendMessage}>Send Message\r\n                    </button>\r\n                </form>\r\n                <div className=\"chat__inputIcons\">\r\n                    <CardGiftcardIcon fontSize=\"large\" />\r\n                    <GifIcon fontSize=\"large\" />\r\n                    <EmojiEmotionsIcon fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setChannelInfo } from \"./features/appSlice\";\r\nimport \"./SidebarChannel.css\";\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div\r\n            className=\"sidebarChannel\"\r\n            onClick={() =>\r\n                dispatch(\r\n                    setChannelInfo({\r\n                        channelId: id,\r\n                        channelName: channelName,\r\n                    })\r\n                )\r\n            }\r\n        >\r\n            <h4>\r\n                <span className=\"sidebarChannel__hash\">#</span>\r\n                {channelName}\r\n            </h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarChannel;","import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport './Sidebar.css'\r\nimport SidebarChannel from './SidebarChannel';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport db, { auth } from './firebase';\r\nimport { useEffect, useState } from 'react';\r\nconst Sidebar = () => {\r\n\r\n    const user = useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);\r\n\r\n    useEffect(() => {\r\n        db.collection(\"channels\").onSnapshot((snapshot) =>\r\n            setChannels(\r\n                snapshot.docs.map((doc) => ({\r\n                    id: doc.id,\r\n                    channel: doc.data(),\r\n                }))\r\n            )\r\n        );\r\n    }, []);\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt(\"Enter a new channel name\");\r\n\r\n        if (channelName) {\r\n            db.collection(\"channels\").add({\r\n                channelName: channelName,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h3>Srikar's Server</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n                </div>\r\n\r\n                <div className=\"sidebar__channelsList\">\r\n                    {channels.map(({ id, channel }) => (\r\n                        <SidebarChannel\r\n                            key={id}\r\n                            id={id}\r\n                            channelName={channel.channelName}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon\r\n                    className=\"sidebar__voiceIcon\"\r\n                    fontSize=\"large\"\r\n                />\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar onClick={() => auth.signOut()} src={user.photo} />\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0, 4)}</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import { Button } from '@material-ui/core';\r\nimport './Login.css';\r\nimport { auth, provider } from './firebase';\r\n\r\nconst Login = () => {\r\n    const signIn = e => {\r\n        auth.signInWithPopup(provider).catch(error => alert(error.message))\r\n\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__logo\">\r\n                <img src=\"https://1000logos.net/wp-content/uploads/2020/10/Discord-logo.png\" alt=\"discord logo\" />\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport Chat from './Chat';\nimport Sidebar from './Sidebar';\nimport { selectUser } from './features/userSlice'\nimport Login from './Login';\nimport { auth } from './firebase';\nimport { login, logout } from './features/userSlice'\nfunction App() {\n  const dispatch = useDispatch()\n  const user = useSelector(selectUser)\n\n  useEffect(() => {\n    auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        dispatch(login({\n          uid: authUser.uid,\n          photo: authUser.photoURL,\n          email: authUser.email,\n          displayName: authUser.displayName,\n        }))\n      } else {\n        dispatch(logout());\n      }\n    })\n  }, [dispatch])\n\n  return (\n    <div className=\"app\">\n      {user ? (\n        <>\n          <Sidebar />\n          <Chat />\n        </>\n      ) : (\n        <Login />\n      )}\n\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport appReducer from '../features/appSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}